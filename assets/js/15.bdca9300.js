(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{414:function(a,s,e){"use strict";e.r(s);var t=e(56),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"lerna"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[a._v("#")]),a._v(" lerna")]),a._v(" "),e("p",[e("strong",[a._v("learn 是一个基于 git+npm 的多 package 项目的管理工具。")])]),a._v(" "),e("h3",{attrs:{id:"一、lerna-解决的痛点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、lerna-解决的痛点"}},[a._v("#")]),a._v(" 一、lerna 解决的痛点")]),a._v(" "),e("h4",{attrs:{id:"痛点-1-重复操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#痛点-1-重复操作"}},[a._v("#")]),a._v(" 痛点 1：重复操作")]),a._v(" "),e("ul",[e("li",[a._v("多 package 本地 link")]),a._v(" "),e("li",[a._v("多 package 依赖安装")]),a._v(" "),e("li",[a._v("多 package 单元测试")]),a._v(" "),e("li",[a._v("多 package 代码提交")]),a._v(" "),e("li",[a._v("多 package 代码发布")])]),a._v(" "),e("h4",{attrs:{id:"痛点-2-版本一致性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#痛点-2-版本一致性"}},[a._v("#")]),a._v(" 痛点 2：版本一致性")]),a._v(" "),e("ul",[e("li",[a._v("发布时版本一致性")]),a._v(" "),e("li",[a._v("发布后相互依赖版本升级")])]),a._v(" "),e("h3",{attrs:{id:"二、如何使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、如何使用"}},[a._v("#")]),a._v(" 二、如何使用")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" init\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" i lerna -D\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这步会自动生成lerna.json 和 空的packages文件夹, 如果当前不是git仓库还会自动创建git仓库")]),a._v("\n$ lerna init\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建 @cxxgo/core 包（发包前需要提前在npm上建好@cxxgo这个group）")]),a._v("\n$ lerna create @cxxgo/core\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 再创建一个 @cxxgo/utils 包")]),a._v("\n$ lerna create @cxxgo/utils\n")])])]),e("p",[a._v("到这一步，我们的项目目录已经变成了这样:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("├─cxxgo\n  ├─package.json\n  ├─node_modules\n  ├─packages\n    ├─core\n      ├─package.json\n      ├─node_modules\n    ├─utils\n      ├─package.json\n      ├─node_modules\n")])])]),e("h3",{attrs:{id:"三、常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、常用命令"}},[a._v("#")]),a._v(" 三、常用命令")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna add xxx")])])]),a._v(" "),e("p",[a._v("xxx 依赖会被安装到 packages 目录下的所有的包中。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna add xxx packages/core")])])]),a._v(" "),e("p",[a._v("把 xxx 依赖安装到 packages/core 包下")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna clean")])])]),a._v(" "),e("p",[a._v("删除 packages 目录下所有包的 node_modules 文件夹（ps:但不会从 package.json 中删除）。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna bootstrap")])])]),a._v(" "),e("p",[a._v("给所有的包重新安装依赖。")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("larn run xxx")])])]),a._v(" "),e("p",[a._v("执行所有包里的 xxx script 命令")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("learn link")])])]),a._v(" "),e("p",[a._v("链接互相引用的库")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna version")])])]),a._v(" "),e("p",[a._v("识别出修改的包 --\x3e 创建新的版本号 --\x3e 修改 package.json --\x3e 提交修改 打上版本的 tag --\x3e 推送到 git 上")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("lerna publish")])])]),a._v(" "),e("p",[a._v("发布新的库版本。")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("$ lerna publish  "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 发布最新commit的修改")]),a._v("\n$ lerna publish "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("commit-id"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 发布指定commit-id的代码")]),a._v("\n")])])]),e("ul",[e("li",[e("code",[a._v("lerna exec")])])]),a._v(" "),e("p",[a._v("在每个包目录下执行任意命令，如"),e("code",[a._v("lerna exec -- rm -rf node_modules")]),a._v(",将会删除 packages 目录下所有的 node_modules")]),a._v(" "),e("ul",[e("li",[e("p",[e("code",[a._v("lerna changed")]),a._v(" 查看哪些包有变更")])]),a._v(" "),e("li",[e("p",[e("code",[a._v("lerna diff")]),a._v(" 查看代码变更")])])]),a._v(" "),e("h3",{attrs:{id:"四、踩过的坑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、踩过的坑"}},[a._v("#")]),a._v(" 四、踩过的坑")]),a._v(" "),e("h4",{attrs:{id:"坑-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#坑-1"}},[a._v("#")]),a._v(" 坑 1")]),a._v(" "),e("p",[a._v('group 形式的包，lerna 会默认为其是私有的，直接发会发不上去，报错 "You must sign up for private packages", 这种情况下，需要在每个包的 package.json 中添加配置')]),a._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[a._v('"publishConfig"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[a._v('"access"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"public"')]),a._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("h4",{attrs:{id:"坑-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#坑-2"}},[a._v("#")]),a._v(" 坑 2")]),a._v(" "),e("p",[a._v("lerna 每次在 publish 之后，会自动在 git 仓库上打一个 tag(版本号), 如果当前版本号低于之前发布的版本号，是 publish 不成功的。")]),a._v(" "),e("h4",{attrs:{id:"坑-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#坑-3"}},[a._v("#")]),a._v(" 坑 3")]),a._v(" "),e("p",[a._v("运行 lerna publish 如果中途有包发布失败，再运行 lerna publish 的时候，因为 Tag 已经打上去了，所以不会再重新发布包到 NPM。（这个时候本地"),e("code",[a._v("git tag")]),a._v(" 查看，可以看到生成了新的 tag 和 commit 记录，但是远端仓库可能没有 push 成功）。")]),a._v(" "),e("p",[a._v("解决办法：")]),a._v(" "),e("ol",[e("li",[a._v("运行"),e("code",[a._v("lerna publish from-git")]),a._v("，会把当前标签中涉及的 NPM 包再发布一次，PS：不会再更新 package.json，也不会把当前的 tag push 到 github 上，只是执行"),e("code",[a._v("npm publish")])]),a._v(" "),e("li",[a._v("运行"),e("code",[a._v("lerna publish from-package")]),a._v("，会把当前所有本地包中的 package.json 和远端 NPM 比对，如果是 NPM 上不存在的包版本，都执行一次 npm publish")])])])}),[],!1,null,null,null);s.default=n.exports}}]);