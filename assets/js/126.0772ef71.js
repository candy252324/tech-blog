(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{524:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"tsx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tsx"}},[t._v("#")]),t._v(" .tsx?")]),t._v(" "),a("p",[t._v("目前主流的 ts 编译方案有 2 种，分别是官方 tsc 编译 和 babel + ts  插件编译。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("方案 1：官方 tsc 编译")])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("编译器是 "),a("code",[t._v("tsc")]),t._v("（通过安装"),a("code",[t._v("typescirpt")]),t._v("获得），使用 "),a("code",[t._v("tsc")]),t._v(" 必须要有 "),a("code",[t._v("tsconfig.json")]),t._v("配置文件。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("tsc")]),t._v(" 除了能编译 ts，还会做类型检查，它会扫描那些包括 "),a("code",[t._v("node_modules")]),t._v(" 在内的类型定义文件（*.d.ts）以确保代码正确，缺点是每次修改代码后，哪怕是一点小修改，可能都会很慢，所以许多人将 Typescript 类型检查放到一个单独的进程。")])])]),t._v(" "),a("p",[t._v("比如如下代码，运行 "),a("code",[t._v("tsc index.ts")]),t._v("是无法编译成功的，报错"),a("code",[t._v("Type 'number' is not assignable to type 'string'.")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("对于 webpack 项目，需要安装"),a("code",[t._v("ts-loader")]),t._v("（本质上还是调用的 "),a("code",[t._v("tsc")]),t._v("）。")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("方案 2：babel + ts 插件编译（建议）")])])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("babel 处理 ts 的方式是删除 ts 代码，将其转换为 “常规的” js 代码进行处理。")])]),t._v(" "),a("li",[a("p",[t._v("babel 本身不做类型检查，它只负责编译，所以上面的测试代码，用 babel 编译是可以成功的。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("虽然 babel 不做类型检查，我们还是需要类型检查来保证开发时的效率和质量，具体如何配置看另一章节《ts 的类型检查》。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("对于 webpack 项目，需要安装"),a("code",[t._v("babel-loader")]),t._v("。")])]),t._v(" "),a("p",[a("strong",[t._v("babel 7 之后，方案 1 可以弃用了，建议使用方案 2")]),t._v("。")]),t._v(" "),a("p",[t._v("以下方案 2 具体配置方式：")]),t._v(" "),a("p",[t._v("安装依赖："),a("code",[t._v("yarn add babel-loader @babel/preset-typescript -D")])]),t._v(" "),a("blockquote",[a("p",[t._v("其中"),a("a",{attrs:{href:"https://www.babeljs.cn/docs/babel-preset-typescript",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("@babel/preset-typescript")]),a("OutboundLink")],1),t._v("是 ts 的预设，它包含插件 "),a("code",[t._v("@babel/plugin-transform-typescript")]),t._v("（这个插件无需额外安装）。")])]),t._v(" "),a("p",[t._v("增加 webpack 配置:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("module")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("rules")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\.tsx?$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"babel-loader"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// .babelrc")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"presets"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/preset-typescript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"allExtensions"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"isTSX"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意到我这里给它添加了两个参数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("allExtensions:true")]),t._v("：将所有的文件类型都按照 ts、tsx 或没有 jsx 歧义的 ts（取决于"),a("code",[t._v("isTSX")]),t._v("和"),a("code",[t._v("disallowAmbiguousJSXLike")]),t._v("选项）来解析\n")])]),t._v(" "),a("blockquote",[a("p",[t._v("添加这个配置的原因是："),a("code",[t._v(".vue")]),t._v("文件中的"),a("code",[t._v("<script>")]),t._v("添加"),a("code",[t._v("lang='ts'")]),t._v("后，编译失败了，原因是"),a("code",[t._v(".vue")]),t._v("经过"),a("code",[t._v("vue-loader")]),t._v("处理后的后缀还是"),a("code",[t._v(".vue")]),t._v("，"),a("code",[t._v("babel-loader")]),t._v("将其当做 js 解析了。")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v('"isTSX": true')]),t._v("：强制开启 jsx 解析。")])]),t._v(" "),a("blockquote",[a("p",[t._v("添加这个配置的原因是："),a("code",[t._v("allExtensions")]),t._v(" 设置为 "),a("code",[t._v("true")]),t._v(" 后，"),a("code",[t._v(".jsx")]),t._v("文件又无法正确解析了，因为被当成 ts 处理了。")])]),t._v(" "),a("p",[t._v("当然，如果项目决定使用 ts 了，就不要再写 jsx，改成 tsx 吧。")])])}),[],!1,null,null,null);s.default=n.exports}}]);